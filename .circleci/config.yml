# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on Android, read the docs:
# https://circleci.com/docs/2.0/language-android/ for more details.
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  android: circleci/android@1.0.3
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    machine:
      image: android:2022.09.1
    steps:
      - checkout
      - run: java --version
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define the Android machine image executor.
    # See: https://circleci.com/docs/2.0/executor-types/
    executor:
      name: android/android-machine

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout

      # The next step will run the unit tests
      - android/run-tests:
          test-command: ./gradlew lint testDebug --continue

      # Then start the emulator and run the Instrumentation tests!
      - android/start-emulator-and-run-tests:
          test-command: ./gradlew connectedDebugAndroidTest
          system-image: system-images;android-33;google_apis;x86

      # And finally run the release build
      - run:
          name: Assemble release build
          command: |
            ./gradlew assembleRelease

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test

description: |
  Change default java version from OpenJDK v17.
parameters:
  java-version:
    default: 8
    description: |
      The version of OpenJDK to change to
    type: integer
steps:
  - run:
      command: |-
        #!/bin/bash
         CURRENT_JAVA_VER="$( java -version 2>&1 | head -1 | cut -d'"' -f2 | sed '/^1\./s///' | cut -d'.' -f1 )"
                CURRENT_JAVAC_VER="$( javac -version 2>&1 | head -1 | cut -f 2- -d ' ' | sed '/^1\./s///' | cut -d'.' -f1 )"
                echo "Current Java Version: $CURRENT_JAVA_VER"
                echo "Current Java Compiler Version : $CURRENT_JAVAC_VER"
                if [ "$CURRENT_JAVA_VER" -ne "${PARAM_JAVA_VER}" ]; then
                  if [ "${PARAM_JAVA_VER}" -eq 8 ] || [ "${PARAM_JAVA_VER}" -eq 17 ]; then
                    if [ "${PARAM_JAVA_VER}" -eq 8 ]; then
                      sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
                    else
                      sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
                    fi
                    sudo update-alternatives --set javac /usr/lib/jvm/java-"${PARAM_JAVA_VER}"-openjdk-amd64/bin/javac
                  else
                    sudo apt install openjdk-"${PARAM_JAVA_VER}"-jdk
                    sudo update-alternatives --set javac /usr/lib/jvm/java-"${PARAM_JAVA_VER}"-openjdk-amd64/bin/javac
                    sudo update-alternatives --set java /usr/lib/jvm/java-"${PARAM_JAVA_VER}"-openjdk-amd64/bin/java
                  fi
                  echo "export JAVA_HOME=/usr/lib/jvm/java-${PARAM_JAVA_VER}-openjdk-amd64" >> ~/.bashrc
                  echo "export PATH=$JAVA_HOME/bin:$PATH" >> ~/.bashrc
                fi
                NEW_JAVA_VER="$( java -version 2>&1 | head -1 | cut -d'"' -f2 | sed '/^1\./s///' | cut -d'.' -f1 )"
                NEW_JAVAC_VER="$( javac -version 2>&1 | head -1 | cut -f 2- -d ' ' | sed '/^1\./s///' | cut -d'.' -f1 )"
                echo "New Java Version : $NEW_JAVA_VER"
                echo "New Java Compiler Version : $NEW_JAVAC_VER"
      environment:
        PARAM_JAVA_VER: << parameters.java-version >>
      name: Change OpenJDK version to << parameters.java-version >>
